{
    "contents" : "# 1. Merge the training and the test sets to create one data set.\n# 4. Appropriately label the data set with descriptive variable names.\nfeatureNames <- read.table('./UCI HAR Dataset/features.txt')[,2]\n\ntrainFeatures <- read.table('./UCI HAR Dataset/train/X_train.txt', col.names=featureNames)\ntestFeatures <- read.table('./UCI HAR Dataset/test/X_test.txt', col.names=featureNames)\nfeatures <- rbind(trainFeatures, testFeatures)\n\n# 2. Extract only the measurements on the mean and standard deviation for each measurement.\nfeatureNames <- read.table('./UCI HAR Dataset/features.txt')[,2]\nusedFeatures <- grep('mean|std', featureNames, ignore.case=TRUE)\nfeatures <- features[,usedFeatures]\n\n\n# Add the subject index to the dataset\ntrainSubjectIndex <- read.table('./UCI HAR Dataset/train/subject_train.txt', col.names='Subject.Index')\ntestSubjectIndex <- read.table('./UCI HAR Dataset/test/subject_test.txt', col.names='Subject.Index')\nsubjects <- rbind(trainSubjectIndex, testSubjectIndex)\nfeatures <- cbind(features, subjects)\n\n# 3. Use descriptive activity names to name the activities in the data set.\ntrainActivityIndex <- read.table('./UCI HAR Dataset/train/y_train.txt', col.names='Activity.Index')\ntestActivityIndex <- read.table('./UCI HAR Dataset/test/y_test.txt', col.names='Activity.Index')\nactivityLabels <- read.table('./UCI HAR Dataset/activity_labels.txt', col.names=c('Activity.Index', 'Activity.Label'))\nactivities <- rbind(trainActivityIndex, testActivityIndex)\nactivities$id <- 1:nrow(activities)  # Apply an index to the data\nactivities <- merge(activityLabels, activities)\nactivities <- activities[order(activities$id), ]\nactivities$id <- NULL\nfeatures <- cbind(features, activities)\n\n# 5.  then you are taking the mean for each grouping Subject+Activity.\n\n# there should only be 1 row for each unique combination of Subject and Activity. \n# This would be like a dual primary key in a database. So for instance, \n# there should be no duplicates of Subject \"1\" and Activity \"Walking\". \n# The output for each variable/column should be the mean of all combinations of Subject \"1\" \n# and Activity \"Walking\" for the target variable. For me the dplyr library provided \n# the easiest solution to accomplish this.\n\n\n# Read the test data, applying names to columns and binding subject and activity indices\n#testFeatures <- read.table('./UCI HAR Dataset/test/X_test.txt', col.names=featureNames)\n#testSubjectIndex <- read.table('./UCI HAR Dataset/test/subject_test.txt', col.names='Subject.Index')\n#testActivityIndex <- read.table('./UCI HAR Dataset/test/y_test.txt', col.names='Activity.Index')\n#testResults <- cbind(testSubjectIndex, testActivityIndex, testFeatures)\n\n\n# Read the training data, applying names to columns and binding subject and activity indices\n#trainFeatures <- read.table('./UCI HAR Dataset/train/X_train.txt', col.names=featureNames)\n#trainSubjectIndex <- read.table('./UCI HAR Dataset/train/subject_train.txt', col.names='Subject.Index')\n#trainActivityIndex <- read.table('./UCI HAR Dataset/train/y_train.txt', col.names='Activity.Index')\n#trainResults <- cbind(trainSubjectIndex, trainActivityIndex, trainFeatures)\n",
    "created" : 1414119627990.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "476065359",
    "id" : "78169DD5",
    "lastKnownWriteTime" : 1414237022,
    "path" : "~/Documents/Coursera/Getting and Cleaning Data/Project/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}